#!/bin/bash

# Notes:
#  - Please install "jq" package before using this driver.
WAIT_SLEEP_TIME_IN_SECONDS=2

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

get_meta_data() {
    EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null`
    EC2_REGION="`echo \"${EC2_AVAIL_ZONE}\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
    INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null`
    local instances=`aws ec2 describe-instances --region ${EC2_REGION} --instance-ids ${INSTANCE_ID}`
    SUBNET_ID=`echo "${instances}" | jq -r '.Reservations[0].Instances[0].SubnetId'`
    VPC_ID=`echo "${instances}" | jq -r '.Reservations[0].Instances[0].VpcId'`
}

wait_fs_transition() {
    local current_state=$1
    local start_state=$1
    local end_state=$2
    while [ "${current_state}" == "${start_state}" ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local fileSystems=`aws efs describe-file-systems --region ${EC2_REGION} --file-system-id ${FSID} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed to describe fs ${FSID}: ${fileSystems}"
        fi
        current_state=$(echo ${fileSystems} | jq -r '.FileSystems[0].LifeCycleState')
    done
    if [ "${current_state}" != "${end_state}" ]; then
        print_error "Failed fs ${FSID} transition, expected end state is: ${end_state}, got ${current_state}"
    fi

}

wait_mount_target_transition() {
    local current_state=$1
    local start_state=$1
    local end_state=$2
    while [ "${current_state}" == "${start_state}" ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local mountTargets=`aws efs describe-mount-targets --region ${EC2_REGION} --mount-target-id ${MOUNT_TARGET_ID} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed to describe mount target ${MOUNT_TARGET_ID}: ${mountTargets}"
        fi
        current_state=$(echo ${mountTargets} | jq -r '.MountTargets[0].LifeCycleState')
    done
    if [ "${current_state}" != "${end_state}" ]; then
        print_error "Failed mount target ${MOUNT_TARGET_ID} transition, expected end state is: ${end_state}, got ${current_state}"
    fi

}

wait_mount_target_deleting() {
    local num=1
    while [ "${num}" == 1 ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local fileSystems=`aws efs describe-file-systems --region ${EC2_REGION} --file-system-id ${FSID} 2>&1`
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to describe fs ${FSID}: ${fileSystems}\"}"
            exit 1
        fi
        num=$(echo ${fileSystems} | jq -r '.FileSystems[0].NumberOfMountTargets')
    done
}

init()
{
    init_nfs_client_service
    print_success
}

create() {
    if [ ! -z "${OPTS[fsid]}" ]; then
        print_success
        exit 0
    fi

    if [ -z "${OPTS[creationToken]}" ]; then
        print_error "creationToken is required"
    fi

    local creationToken="--creation-token ${OPTS[creationToken]}"

    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi

    local performanceMode=""
    if [ ! -z "${OPTS[performanceMode]}" ]; then
        performanceMode="--performance-mode ${OPTS[performanceMode]}"
    fi

    get_meta_data

    # create a EFS FS using aws-cli
    local fs=`aws efs create-file-system --region ${EC2_REGION} ${creationToken} ${performanceMode} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: ${fs}"
    fi
    FSID=$(echo ${fs} | jq -r '.FileSystemId')

    wait_fs_transition "creating" "available"

    # create a security group for mount target
    local description="From cattle EFS driver, SG for mount target of EFS: ${FSID}"
    local groupName="SG-Mount-Target-EFS-${FSID}"
    local mtSG=`aws ec2 create-security-group --region ${EC2_REGION} --vpc-id ${VPC_ID} --group-name ${groupName} --description "${description}" 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: create-security-group. ${mtSG}"
    fi
    local mountTargetSGID=$(echo ${mtSG} | jq -r '.GroupId')

    # open NFS4.1 port 2049 on the security group just created
    local error=`aws ec2 authorize-security-group-ingress --region ${EC2_REGION} --group-id ${mountTargetSGID} --protocol tcp --port 2049 --cidr 0.0.0.0/0 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: authorize-security-group-ingress for SG ${mountTargetSGID}. ${error}"
    fi

    # create a mount target for the EFS
    local fsMountTarget=`aws efs create-mount-target --region ${EC2_REGION} --file-system-id ${FSID} --subnet-id ${SUBNET_ID} --security-group ${mountTargetSGID} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: ${fsMountTarget}"
    fi
    MOUNT_TARGET_ID=$(echo ${fsMountTarget} | jq -r '.MountTargetId')

    wait_mount_target_transition "creating" "available"

    # tag the newly created volume
    error=`aws efs create-tags --region ${EC2_REGION} --file-system-id ${FSID} --tags Key=Name,Value=${OPTS[name]} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: create-tags for EFS ${FSID} Key=Name,Value=${OPTS[name]} failed. ${error}}"
    fi

    print_options created true fsid ${FSID} mountTargetId ${MOUNT_TARGET_ID} mountTargetSGID ${mountTargetSGID}
}

delete() {
    if [ -z "${OPTS[created]}" ]; then
        print_success
        exit 0
    fi

    if [ -z "${OPTS[fsid]}" ]; then
        print_error "fsid is required"
    fi

    if [ -z "${OPTS[mountTargetId]}" ]; then
        print_error "mountTargetId is required"
    fi

    if [ -z "${OPTS[mountTargetSGID]}" ]; then
        print_error "mountTargetSGID is required"
    fi

    FSID=${OPTS[fsid]}
    MOUNT_TARGET_ID=${OPTS[mountTargetId]}

    get_meta_data

    local error=`aws efs delete-mount-target --region ${EC2_REGION} --mount-target-id ${MOUNT_TARGET_ID} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to delete mount target ${MOUNT_TARGET_ID}. ${error}"
    fi

    wait_mount_target_deleting

    local mountTargetSGID=${OPTS[mountTargetSGID]}
    local error=`aws ec2 delete-security-group --region ${EC2_REGION} --group-id ${mountTargetSGID} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to delete mount target security group ${mountTargetSGID}. ${error}"
    fi

    local error=`aws efs delete-file-system --region ${EC2_REGION} --file-system-id ${FSID} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to delete volume ${FSID}. ${error}"
    fi

    print_success
}

attach() {
    print_not_supported
}

detach() {
    print_not_supported
}

mountdest() {
    if [ -z "${OPTS[fsid]}" ]; then
        print_error "fsid is required"
    fi

    if [ -z "${OPTS[export]}" ]; then
        print_error "export is required"
    fi

    local mntOptions="-o vers=4.1"
    if [ ! -z "${OPTS[mntOptions]}" ]; then
        mntOptions="-o ${OPTS[mntOptions]}"
    fi

    if [ $(ismounted "${MNT_DEST}") == 1 ] ; then
        print_success
        exit 0
    fi

    get_meta_data

    efsDNSName=${EC2_AVAIL_ZONE}.${OPTS[fsid]}.efs.${EC2_REGION}.amazonaws.com
    mkdir -p "${MNT_DEST}"
    get_host_process_pid
    local error=`nsenter -t $TARGET_PID -n mount -t nfs4 ${mntOptions} ${efsDNSName}:${OPTS[export]} ${MNT_DEST} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to mount ${efsDNSName}:${OPTS[export]} at ${MNT_DEST}. ${error}"
    fi

    print_success
}

unmount() {
    if [ $(ismounted "${MNT_DEST}") == 0 ] ; then
        print_success
        exit 0
    fi

    local error=`umount ${MNT_DEST} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to unmount volume at ${MNT_DEST}. ${error}"
    fi

    print_success
}

# Every script must call main as such
main "$@"