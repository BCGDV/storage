#!/bin/bash

# Notes:
#  - Please install "jq" package before using this driver.

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

mount_default_share() {
    local mntDest=$1

    # get host:export from environment variables
    if [ -z "${HOST}" ]; then
        print_error "Failure: No environment variable HOST found\"}"
    fi

    if [ -z "${EXPORT}" ]; then
        print_error "Failure: No environment variable EXPORT found\"}"
    fi

    # mount remote share if not mounted already
    if [ $(ismounted "${mntDest}") == 0 ] ; then
        sudo mkdir -p "${mntDest}"
        error=`sudo mount "${HOST}":"${EXPORT}" "${mntDest}" 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed mount ${HOST}:${EXPORT} ${mntDest}: ${error}"
        fi
    fi
}

unmount_default_share() {
    local mntDest=$1

    # now unmount
    local error=`sudo umount ${mntDest} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed umount ${mntDest}: ${error}"
    fi

    # remove empty temporary mntDest directory we created
    if [ ! "$(ls -A ${mntDest})" ]; then
        sudo rm -rf "${mntDest}"
    fi
}

init()
{
    print_not_supported
}

create() {
    # if user supplies host:export, we do nothing
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        print_success
        exit 0
    fi

    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi

    local mntDest="mntTmp"
    mount_default_share "${mntDest}"

    # create sub-directory using name parameter to represent volume
    local subDir="${mntDest}"/"${OPTS[name]}"
    local created=0
    if [ ! -d "${subDir}" ]; then
        sudo mkdir -p "${subDir}"
        created=1
    fi

    # now unmount
    unmount_default_share "${mntDest}"

    if [ "${created}" == 1 ]; then
        print_options created true name ${OPTS[name]}
    else
        print_success
    fi
}

delete() {
    if [ -z "${OPTS[created]}" ]; then
        print_success
        exit 0
    fi

    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi

    local mntDest="mntTmp"
    mount_default_share "${mntDest}"

    # delete sub-directory using name parameter to represent volume
    local subDir="${mntDest}"/"${OPTS[name]}"
    if [ -d "$subDir" ]; then
        sudo rm -rf "${subDir}"
    fi

    # now unmount
    unmount_default_share "${mntDest}"

    print_success
}

attach() {
    print_not_supported
}

detach() {
    print_not_supported
}

mount() {
    local mntOptions=""
    if [ ! -z "${OPTS[mntOptions]}" ]; then
        mntOptions="-o ${OPTS[mntOptions]}"
    fi

    local mntSrc="${OPTS[host]}":"${OPTS[export]}"

    # if user does not supply host:export, we will mount remote share host:export/name to mntDst
    if [ -z "${OPTS[host]}" ] || [ -z "${OPTS[export]}" ]; then
        # get host:export from environment variables
        if [ -z "${HOST}" ]; then
            print_error "Failed: No environment variable HOST found"
        fi

        if [ -z "${EXPORT}" ]; then
            print_error "Failed: No environment variable EXPORT found"
        fi

        if [ -z "${OPTS[name]}" ]; then
            print_error "Failed: name is required"
        fi

        mntSrc="${HOST}":"${EXPORT}"/"${OPTS[name]}"
    fi

    # mount remote share if not mounted already
    if [ $(ismounted "${MNT_DEST}") == 0 ] ; then
        sudo mkdir -p "${MNT_DEST}"
        error=`sudo mount ${mntOptions} ${mntSrc} ${MNT_DEST} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed mount ${mntOptions} ${mntSrc} ${MNT_DEST}: ${error}"
        fi
    fi

    print_success
}

unmount() {
    if [ $(ismounted "${MNT_DEST}") == 1 ] ; then
        error=`sudo umount "${MNT_DEST}" 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed umount ${MNT_DEST}: ${error}"
        fi
    fi

    print_success
}


# Every script must call main as such
main "$@"
